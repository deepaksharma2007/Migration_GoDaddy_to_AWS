provider "aws" {
    region = "ap-south-1"
  
}

# To create a VPC 
resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "devOps-VPC"
  }
}

# TO create a Public Subnet 
resource "aws_subnet" "mypublic" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "ap-south-1a"

  tags = {
    Name = "public-subnet"
  }
}

# To create private Subnet 
resource "aws_subnet" "myprivate" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "ap-south-1b"

  tags = {
    Name = "private-subnet"
  }
}

# To create Internet Gateway for Public Subnet 
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main-igw"
  }
}

# To create route table and allow all
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "public-route-table"
  }
}

# To associate route table with 
resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.mypublic.id
  route_table_id = aws_route_table.public.id
}

# TO create a EIP 
resource "aws_eip" "nat" {
  domain = "vpc"
}

# TO  create a Nat Gateway 
resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.mypublic.id

  tags = {
    Name = "main-nat"
  }
}

# To create route table for private Subnet 
resource "aws_route_table" "private" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat.id
  }

  tags = {
    Name = "private-route-table"
  }
}

# To associate private subnet with route table
resource "aws_route_table_association" "private" {
  subnet_id      = aws_subnet.myprivate.id
  route_table_id = aws_route_table.private.id
}

/*
# Create NACL for Public Subnat 
resource "aws_network_acl" "public_nacl" {
  vpc_id = aws_vpc.main.id

  ingress {
    rule_no    = 100
    action     = "allow"
    protocol   = "tcp"
    cidr_block = "0.0.0.0/0"
    from_port  = 80
    to_port    = 80
  }

  egress {
    rule_no    = 100
    action     = "allow"
    protocol   = "-1"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }

  tags = {
    Name = "public-nacl"
  }
}

# Create NACL for Private Subnet 
resource "aws_network_acl" "private_nacl" {
  vpc_id = aws_vpc.main.id

  ingress {
    rule_no    = 100
    action     = "allow"
    protocol   = "tcp"
    cidr_block = "10.0.0.0/16"
    from_port  = 0
    to_port    = 65535
  }

  egress {
    rule_no    = 100
    action     = "allow"
    protocol   = "-1"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }

  tags = {
    Name = "private-nacl"
  }
}

# Associate NACL with Public Subnet 
resource "aws_network_acl_association" "public_nacl_association" {
  subnet_id      = aws_subnet.mypublic.id
  network_acl_id = aws_network_acl.public_nacl.id
}

# Associate NACL with Private Subnet 
resource "aws_network_acl_association" "private_nacl_association" {
  subnet_id      = aws_subnet.myprivate.id
  network_acl_id = aws_network_acl.private_nacl.id
}
*/

# Create Security Group allow port 80 and ssh  
resource "aws_security_group" "public_sg" {
  vpc_id = aws_vpc.main.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

 ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "public-security-group"
  }
}

# Enable SSM :- Create IAM role 
resource "aws_iam_role" "ssm_role" {
  name = "ssm-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

# Enable SSM :- attached required permission with above Role 
resource "aws_iam_policy_attachment" "ssm_attach" {
  name       = "ssm-policy-attachment"
  roles      = [aws_iam_role.ssm_role.name]
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

# Create instance profile 
resource "aws_iam_instance_profile" "ssm_profile" {
  name = "ssm-instance-profile"
  role = aws_iam_role.ssm_role.name
}

# Launch EC2 instance in public Subnet 
resource "aws_instance" "public_instance" {
  ami           = "ami-0d682f26195e9ec0f"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.mypublic.id
  associate_public_ip_address = true
  iam_instance_profile = aws_iam_instance_profile.ssm_profile.name
  vpc_security_group_ids = [aws_security_group.public_sg.id]
   key_name = "my-dev-key"

  tags = {
    Name = "public-ec2-instance"
  }
}
